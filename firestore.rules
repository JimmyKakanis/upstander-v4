rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /reports/{reportId} {
      // Allow anyone to create a report.
      // The `schoolId` must be present in the request data.
      allow create: if request.resource.data.schoolId is string;

      // Allow admins to GET a report if their schoolId claim matches.
      // Allow students to GET a report for follow-up.
      allow get: if (request.auth != null && request.auth.token.schoolId == resource.data.schoolId) ||
                   (exists(/databases/$(database)/documents/followUpAccess/$(resource.data.referenceCode)) &&
                    get(/databases/$(database)/documents/followUpAccess/$(resource.data.referenceCode)).data.reportId == reportId);

      // WARNING: PRAGMATIC BUT INEFFICIENT RULE
      // This rule allows any authenticated admin to list all reports to bypass a
      // persistent bug in the rules engine. Security is handled by client-side filtering.
      allow list: if request.auth != null;

      // Allow admins to update a report if their schoolId claim matches.
      // Core report data must remain unchanged, but status and notes can be modified.
      allow update: if request.auth != null
                    && request.auth.token.schoolId == resource.data.schoolId
                    && request.resource.data.bullyingType == resource.data.bullyingType
                    && request.resource.data.whatHappened == resource.data.whatHappened
                    && request.resource.data.involvedParties == resource.data.involvedParties
                    && request.resource.data.yearLevel == resource.data.yearLevel
                    && request.resource.data.date == resource.data.date
                    && request.resource.data.time == resource.data.time
                    && request.resource.data.location == resource.data.location
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.schoolId == resource.data.schoolId
                    && request.resource.data.referenceCode == resource.data.referenceCode;
    }

    match /schools/{schoolId} {
      // Allow public read access for the school search feature.
      allow get, list: if true;
      // Disallow all write operations from the client.
      allow write: if false;
    }

    // Collection to securely link a public referenceCode to a private reportId
    match /followUpAccess/{referenceCode} {
      // Allow anyone to get a document if they know the exact referenceCode.
      // This is used by students to initiate the follow-up process.
      allow get: if true;

      // Creation is allowed only as part of the report submission transaction.
      allow create: if request.resource.data.reportId is string && request.resource.data.createdAt is timestamp;
      
      // Do not allow clients to list, update, or delete these documents.
      allow list, update, delete: if false;
    }

    // Optional: Secure the admins collection
    match /admins/{adminId} {
      // Allow admins to read their own profile if the UID matches.
      allow read: if request.auth != null && request.auth.uid == adminId;
      
      // Do not allow anyone to create, update, or delete admin documents from the client.
      // This should be handled by a secure backend environment.
      allow create, update, delete: if false; 
    }

    // Allow users to read and write to their own user document and any subcollections.
    match /users/{userId}/{documents=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /conversations/{reportId} {
      // Allow an admin to get the conversation if their schoolId matches the report's schoolId.
      // Also allow read access for the student who has the direct link (reportId).
      allow get: if (request.auth != null && request.auth.token.schoolId == get(/databases/$(database)/documents/reports/$(reportId)).data.schoolId) ||
                   exists(/databases/$(database)/documents/reports/$(reportId));

      // Do not allow clients to list, create, update, or delete conversation documents directly.
      // All writes are handled by the secure API endpoint.
      allow list, write: if false;
    }
  }
}

